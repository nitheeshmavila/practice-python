PEP 8 : Style Guide for Python Code
-----------------------------------
Code lay-out
------------
-->Indentation:
    -----------
    Use 4 spaces per indentation level.
    (Python 3 disallows mixing the use of tabs and spaces for indentation.)
-->Continuation lines should align wrapped elements either vertically using a  hanging indent  . When using a hanging indent the following should be considered; there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line.
# Aligned with opening delimiter.
foo = long_function_name(var_one, var_two,
                         var_three, var_four)

if (this_is_one_thing and
    that_is_another_thing):

The closing brace/bracket/parenthesis on multi-line constructs may either line up under the first non-whitespace character of the last line of list, as in:

my_list = [
    1, 2, 3,
    4, 5, 6,
    ]


Tabs or Spaces?
---------------
When invoking the Python 2 command line interpreter with the -t option, it issues warnings about code that illegally mixes tabs and spaces. When using -tt these warnings become errors. These options are highly recommended!

Spaces are the preferred indentation method.

Maximum Line Length
-------------------

The Python standard library is conservative and requires limiting lines to 79 characters (and docstrings/comments to 72).

Backslashes may still be appropriate at times. For example, long, multiple with -statements cannot use implicit continuation, so backslashes are acceptable:

with open('/path/to/some/file/you/want/to/read') as file_1, \
     open('/path/to/some/file/being/written', 'w') as file_2:
    file_2.write(file_1.read())

Should a line break before or after a binary operator?
-----------------------------------------------------

Following the tradition from mathematics usually results in more readable code:
easy to match operators with operands
income = (gross_wages
          + taxable_interest
          + (dividends - qualified_dividends)
          - ira_deduction
          - student_loan_interest)

Blank Lines
-----------
-->Surround top-level function and class definitions with two blank lines.
-->Method definitions inside a class are surrounded by a single blank line.
-->Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).
-->Use blank lines in functions, sparingly, to indicate logical sections.


Source File Encoding
--------------------
-->Code in the core Python distribution should always use UTF-8 (or ASCII in Python 2).


Imports
--------
Imports should usually be on separate lines, e.g.:

 import os
 import sys>

Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.

Imports should be grouped in the following order:

1)standard library imports
2)related third party imports
3)local application/library specific imports
You should put a blank line between each group of imports.





Module level dunder names
------------------------
Module level "dunders" (i.e. names with two leading and two trailing underscores) such as __all__ , __author__ , __version__ , etc. should be placed after the module docstring but before any import statements except from __future__ imports. Python mandates that future-imports must appear in the module before any other code except docstrings.

For example:

"""This is the example module.

This module does stuff.
"""

from __future__ import barry_as_FLUFL

__all__ = ['a', 'b', 'c']
__version__ = '0.1'
__author__ = 'Cardinal Biggles'

import os
import sys


String Quotes
-------------
In Python, single-quoted strings and double-quoted strings are the same. This PEP does not make a recommendation for this. Pick a rule and stick to it. 
For triple-quoted strings, always use double quote characters to be consistent with the docstring 

------------------------------------------------------------------------------------------------------------
Whitespace in Expressions and Statements
-------------------------------------------------------------------------------------------------------------

Pet Peeves
----------
Avoid extraneous whitespace in the following situations:
1)Immediately inside parentheses, brackets or braces.
2)Immediately before a comma, semicolon, or colon:

3)However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. Exception: when a slice parameter is omitted, the space is omitted.

4)Immediately before the open parenthesis that starts the argument list of a function call:

5)Immediately before the open parenthesis that starts an indexing or slicing:

6)More than one space around an assignment (or other) operator to align it with another.

7)Avoid trailing whitespace anywhere. Because it's usually invisible, it can be confusing: e.g. a backslash followed by a space and a newline does not count as a line continuation marker. Some editors don't preserve it and many projects (like CPython itself) have pre-commit hooks that reject it.

8)Always surround these binary operators with a single space on either side: assignment ( = ), augmented assignment ( += , -= etc.), comparisons ( == , < , > , != , <> , <= , >= , in , not in , is , is not ), Booleans ( and , or , not ).

9)If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies). Use your own judgment; however, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator.

10)Don't use spaces around the = sign when used to indicate a keyword argument or a default parameter value.

11)Function annotations should use the normal rules for colons and always have spaces around the -> arrow if present. 

12)Compound statements (multiple statements on the same line) are generally discouraged.

--------------------------------------------------------------------------------------------------------------
comments
---------------------------------------------------------------------------------------------------------------
Comments should be complete sentences. If a comment is a phrase or sentence, its first word should be capitalized, unless it is an identifier that begins with a lower case letter (never alter the case of identifiers!).

If a comment is short, the period at the end can be omitted. Block comments generally consist of one or more paragraphs built out of complete sentences, and each sentence should end in a period.

You should use two spaces after a sentence-ending period.

When writing English, follow Strunk and White.

Block Comments
--------------
Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code. Each line of a block comment starts with a # and a single space (unless it is indented text inside the comment).

Paragraphs inside a block comment are separated by a line containing a single # .

Inline Comments
------------------
Use inline comments sparingly.

An inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement. They should start with a # and a single space.

Documentation Strings
---------------------
Write docstrings for all public modules, functions, classes, and methods. Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. This comment should appear after the def line.
PEP 257 describes good docstring conventions. Note that most importantly, the """ that ends a multiline docstring should be on a line by itself, e.g.:

"""Return a foobang

Optional plotz says to frobnicate the bizbaz first.
"""
For one liner docstrings, please keep the closing """ on the same line.

---------------------------------------------------------------------------------------------------------------
Naming Conventions
----------------------------------------------------------------------------------------------------------------
can use:
-------
b (single lowercase letter)


B (single uppercase letter)

lowercase

lower_case_with_underscores

UPPERCASE

UPPER_CASE_WITH_UNDERSCORES

dont use
------
Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names.

In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use 'l', use 'L' instead.

Package and Module Names
------------------------
Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged.

Class Names
------------
Class names should normally use the CapWords convention.

Type variable names
-------------------
Names of type variables introduced in PEP 484 should normally use CapWords

Exception Names
--------------
Because exceptions should be classes, the class naming convention applies here. However, you should use the suffix "Error" on your exception names (if the exception actually is an error).

Global Variable Names
---------------------
 The conventions are about the same as those for functions.

Function Names
-------------
Function names should be lowercase, with words separated by underscores as necessary to improve readability.

Function and method arguments
-----------------------------
Always use self for the first argument to instance methods.

Always use cls for the first argument to class methods.

If a function argument's name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption. Thus class_ is better than clss .

Method Names and Instance Variables
-----------------------------------
Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability.
Use one leading underscore only for non-public methods and instance variables.

To avoid name clashes with subclasses, use two leading underscores to invoke Python's name mangling rules.



Constants
----------
Constants are usually defined on a module level and written in all capital letters with underscores separating words. Examples include MAX_OVERFLOW and TOTAL .


----------------------------------------------------------------------------------------------------------------Programming Recommendations
----------------------------------------------------------------------------------------------------------------
1)Code should be written in a way that does not disadvantage other implementations of Python (PyPy, Jython, IronPython, Cython, Psyco, and such).
    eg:do not rely on CPython's efficient implementation of in-place string concatenation for statements in the form a += b or a = a + b . This optimization is fragile even in CPython (it only works for some types) and isn't present at all in implementations that don't use refcounting.

2)Comparisons to singletons like None should always be done with is or is not , never the equality operators.

Also, beware of writing if x when you really mean if x is not None -- e.g. when testing whether a variable or argument that defaults to None was set to some other value. The other value might have a type (such as a container) that could be false in a boolean context!

3)Use is not operator rather than not ... is . While both expressions are functionally identical, the former is more readable and preferred.

4)When implementing ordering operations with rich comparisons, it is best to implement all six operations ( __eq__ , __ne__ , __lt__ , __le__ , __gt__ , __ge__ ) rather than relying on other code to only exercise a particular comparison.

5)Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier.

6)Derive exceptions from Exception rather than BaseException . Direct inheritance from BaseException is reserved for exceptions where catching them is almost always the wrong thing to do.

7)Be consistent in return statements. Either all return statements in a function should return an expression, or none of them should. If any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None

8)Use string methods instead of the string module.

9)Use ''.startswith() and ''.endswith() instead of string slicing to check for prefixes or suffixes.

10)Object type comparisons should always use isinstance() instead of comparing types directly.

11)For sequences, (strings, lists, tuples), use the fact that empty sequences are false.

12)Don't write string literals that rely on significant trailing whitespace. Such trailing whitespace is visually indistinguishable and some editors (or more recently, reindent.py) will trim them.

13)Don't compare boolean values to True or False using == 





